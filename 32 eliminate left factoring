#include <stdio.h>
#include <string.h>

int main() {
    char gram[100], *parts[10], modifiedGram[20], newGram[50];
    int i, j, k = 0, l = 0, pos = 0, num_productions = 0;
    char *token;

    printf("Enter Productions (use '|' to separate each production): S->");
    gets(gram);

    // Split the input string by '|'
    token = strtok(gram, "|");
    while (token != NULL) {
        parts[num_productions++] = token;
        token = strtok(NULL, "|");
    }

    // Find the longest common prefix
    for (i = 0; i < strlen(parts[0]); i++) {
        char current_char = parts[0][i];
        int match = 1;
        for (j = 1; j < num_productions; j++) {
            if (parts[j][i] != current_char) {
                match = 0;
                break;
            }
        }
        if (match) {
            modifiedGram[k++] = current_char;
            pos = i + 1;
        } else {
            break;
        }
    }
    modifiedGram[k] = 'X';
    modifiedGram[++k] = '\0';

    // Generate the new productions
    for (j = 0; j < num_productions; j++) {
        if (j > 0) {
            newGram[l++] = '|';
        }
        for (i = pos; parts[j][i] != '\0'; i++) {
            newGram[l++] = parts[j][i];
        }
    }
    newGram[l] = '\0';

    printf("\n S->%s", modifiedGram);
    printf("\n X->%s\n", newGram);

    return 0;
}

